generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  username          String          @unique
  displayName       String?         @map("display_name")
  email             String          @unique
  passwordHash      String          @map("password_hash")
  avatarUrl         String?         @map("avatar_url")
  bio               String?
  location          String?
  pinnedTweetId     String?         @map("pinned_tweet_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  receivedMessages  DirectMessage[] @relation("MessageReceiver")
  sentMessages      DirectMessage[] @relation("MessageSender")
  following         Follow[]        @relation("UserFollower")
  followers         Follow[]        @relation("UserFollowee")
  likes             Like[]
  sentNotifications Notification[]  @relation("NotificationSource")
  notifications     Notification[]  @relation("NotificationUser")
  pollVotes         PollVote[]
  retweets          Retweet[]
  tweets            Tweet[]
  bookmarks         Bookmark[]
  pinnedTweet       Tweet?          @relation("PinnedTweet", fields: [pinnedTweetId], references: [id])

  @@map("users")
}

model Tweet {
  id            String         @id @default(cuid())
  authorId      String         @map("author_id")
  text          String
  createdAt     DateTime       @default(now()) @map("created_at")
  parentId      String?        @map("parent_id")
  likes         Like[]
  media         Media[]
  notifications Notification[]
  poll          Poll?
  retweets      Retweet[]
  hashtags      TweetTag[]
  bookmarks     Bookmark[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent        Tweet?         @relation("Replies", fields: [parentId], references: [id])
  replies       Tweet[]        @relation("Replies")
  pinnedBy      User[]         @relation("PinnedTweet")

  @@map("tweets")
}

model Media {
  id      String    @id @default(cuid())
  tweetId String    @map("tweet_id")
  url     String
  type    MediaType
  order   Int
  tweet   Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Poll {
  id        String       @id @default(cuid())
  tweetId   String       @unique @map("tweet_id")
  expiresAt DateTime     @map("expires_at")
  options   PollOption[]
  tweet     Tweet        @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@map("polls")
}

model PollOption {
  id        String     @id @default(cuid())
  pollId    String     @map("poll_id")
  text      String
  voteCount Int        @default(0) @map("vote_count")
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     PollVote[]

  @@map("poll_options")
}

model PollVote {
  id        String     @id @default(cuid())
  userId    String     @map("user_id")
  optionId  String     @map("option_id")
  createdAt DateTime   @default(now()) @map("created_at")
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, optionId])
  @@map("poll_votes")
}

model Hashtag {
  id     String     @id @default(cuid())
  tag    String     @unique
  tweets TweetTag[]

  @@map("hashtags")
}

model TweetTag {
  tweetId   String   @map("tweet_id")
  hashtagId String   @map("hashtag_id")
  createdAt DateTime @default(now()) @map("created_at")
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@id([tweetId, hashtagId])
  @@map("tweet_tags")
}

model Follow {
  followerId String   @map("follower_id")
  followeeId String   @map("followee_id")
  createdAt  DateTime @default(now()) @map("created_at")
  followee   User     @relation("UserFollowee", fields: [followeeId], references: [id], onDelete: Cascade)
  follower   User     @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@map("follows")
}

model Like {
  userId    String   @map("user_id")
  tweetId   String   @map("tweet_id")
  createdAt DateTime @default(now()) @map("created_at")
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@map("likes")
}

model Retweet {
  userId    String   @map("user_id")
  tweetId   String   @map("tweet_id")
  createdAt DateTime @default(now()) @map("created_at")
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@map("retweets")
}

model Bookmark {
  userId    String   @map("user_id")
  tweetId   String   @map("tweet_id")
  createdAt DateTime @default(now()) @map("created_at")
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@map("bookmarks")
}

model Notification {
  id            String           @id @default(cuid())
  userId        String           @map("user_id")
  type          NotificationType
  sourceUserId  String?          @map("source_user_id")
  sourceTweetId String?          @map("source_tweet_id")
  isRead        Boolean          @default(false) @map("is_read")
  data          Json?
  createdAt     DateTime         @default(now()) @map("created_at")
  sourceTweet   Tweet?           @relation(fields: [sourceTweetId], references: [id], onDelete: Cascade)
  sourceUser    User?            @relation("NotificationSource", fields: [sourceUserId], references: [id], onDelete: Cascade)
  user          User             @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model DirectMessage {
  id         String            @id @default(cuid())
  senderId   String            @map("sender_id")
  receiverId String            @map("receiver_id")
  text       String
  gifUrl     String?           @map("gif_url")
  imageUrl   String?           @map("image_url")
  isDeleted  Boolean           @default(false) @map("is_deleted")
  deletedAt  DateTime?         @map("deleted_at")
  status     MessageStatus     @default(SENT)
  createdAt  DateTime          @default(now()) @map("created_at")
  readAt     DateTime?         @map("read_at")
  receiver   User              @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User              @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum NotificationType {
  LIKE
  RETWEET
  FOLLOW
  MENTION
  REPLY
  POLL_VOTE
}
